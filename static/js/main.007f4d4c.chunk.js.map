{"version":3,"sources":["components/Coin.js","App.js","reportWebVitals.js","index.js"],"names":["Coin","image","name","symbol","price","volume","priceChange","marketCap","className","src","alt","toFixed","toLocaleString","App","useState","coins","setCoins","search","setSearch","useEffect","axios","get","then","res","data","console","log","catch","error","alert","filteredCoins","filter","coin","toLowerCase","includes","onChange","e","target","value","type","placeholder","length","map","current_price","market_cap","price_change_percentage_24h","total_volume","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NA6BeA,EA1BF,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,MAAOC,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAC7D,OACI,qBAAKC,UAAU,iBAAf,SACI,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,OAAf,UACI,qBAAKC,IAAKR,EAAOS,IAAI,WACrB,6BAAKR,IACL,mBAAGM,UAAU,cAAb,SAA4BL,OAEhC,sBAAKK,UAAU,YAAf,UACI,oBAAGA,UAAU,aAAb,UAA2BJ,EAAMO,QAAQ,GAAzC,aACA,oBAAGH,UAAU,cAAb,UAA4BH,EAAOO,iBAAnC,YACCN,EAAc,EACX,oBAAGE,UAAU,mBAAb,UAAiCF,EAAYK,QAAQ,GAArD,OAEA,oBAAGH,UAAU,qBAAb,UAAmCF,EAAYK,QAAQ,GAAvD,OAEJ,oBAAGH,UAAU,iBAAb,sBACcD,EAAUK,iBADxB,qBC4CLC,MA1Df,WAAe,MAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGeF,mBAAS,IAHxB,mBAGNG,EAHM,KAGEC,EAHF,KAMbC,qBAAU,WACRC,IAAMC,IACJ,4HAEDC,MAAK,SAAAC,GACJP,EAASO,EAAIC,MACbC,QAAQC,IAAIH,EAAIC,SACfG,OAAM,SAAAC,GAAK,OAAIC,MAAM,oCACvB,IAGH,IAKMC,EAAgBf,EAAMgB,QAAO,SAAAC,GAAI,OACrCA,EAAK9B,KAAK+B,cAAcC,SAASjB,EAAOgB,kBAG1C,OACE,sBAAKzB,UAAU,WAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,YAAd,+BACA,mBAAGA,UAAU,WAAb,uCACA,+BACE,uBAAO2B,SAfM,SAACC,GACpBlB,EAAUkB,EAAEC,OAAOC,QAcoBC,KAAK,OAAOC,YAAY,SAAShC,UAAU,oBAK/EsB,EAAcW,OAAS,EAAKX,EAAcY,KAAI,SAAAV,GAC7C,OACE,cAAC,EAAD,CAEE9B,KAAM8B,EAAK9B,KACXE,MAAO4B,EAAKW,cACZ1C,MAAO+B,EAAK/B,MACZE,OAAQ6B,EAAK7B,OACbI,UAAWyB,EAAKY,WAChBtC,YAAa0B,EAAKa,4BAClBxC,OAAQ2B,EAAKc,cAPRd,EAAKe,OAWhB,mBAAGvC,UAAU,WAAb,4CC7CSwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.007f4d4c.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../App.css';\r\n\r\nconst Coin = ({ image, name, symbol, price, volume, priceChange, marketCap }) => {\r\n    return (\r\n        <div className='coin-container'>\r\n            <div className=\"coin-row\">\r\n                <div className=\"coin\">\r\n                    <img src={image} alt=\"crypto\"/>\r\n                    <h1>{name}</h1>\r\n                    <p className=\"coin-symbol\">{symbol}</p>\r\n                </div>\r\n                <div className=\"coin-data\">\r\n                    <p className=\"coin-price\">{price.toFixed(2)} €</p>\r\n                    <p className=\"coin-volume\">{volume.toLocaleString()}€</p>\r\n                    {priceChange < 0 ? (\r\n                        <p className=\"coin-percent red\">{priceChange.toFixed(2)}%</p>\r\n                    ) : (\r\n                        <p className=\"coin-percent green\">{priceChange.toFixed(2)}%</p> \r\n                    )}\r\n                    <p className=\"coin-marketcap\">\r\n                        Mkt Cap: {marketCap.toLocaleString()}€\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Coin\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Coin from './components/Coin';\n\n\nfunction App() {\n  //Define state coins, setCoins updates the state\n  const [coins, setCoins] = useState([]);\n  const [search, setSearch] = useState('');\n\n  //Pull data on page load\n  useEffect(() => {\n    axios.get(\n      'https://api.coingecko.com/api/v3/coins/markets?vs_currency=eur&order=market_cap_desc&per_page=100&page=1&sparkline=false'\n    )\n    .then(res => {\n      setCoins(res.data);\n      console.log(res.data);\n    }).catch(error => alert('Error connecting to the API'))\n  }, []); //= render 1 time - without this it was an infinite loop\n\n  //Function to handle change input\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  }\n\n  //Filter the searched coins\n  const filteredCoins = coins.filter(coin => //THIS SYNTAX = RETURN THIS VALUE\n    coin.name.toLowerCase().includes(search.toLowerCase()) //Lowercase the search input value\n  )\n\n  return (\n    <div className=\"coin-app\">\n      <div className=\"coin-search\">\n        <h1 className=\"coin-text\">Search a currency</h1>\n        <p className=\"tool-tip\">Refresh for live updates!</p>\n        <form>\n          <input onChange={ handleChange } type=\"text\" placeholder=\"Search\" className=\"coin-input\"/>\n        </form>\n      </div>\n      \n      {/* Passing the api data to coin component as props */}\n      {filteredCoins.length > 0 ? (filteredCoins.map(coin => {\n        return (\n          <Coin \n            key={coin.id} \n            name={coin.name} \n            price={coin.current_price} \n            image={coin.image} \n            symbol={coin.symbol} \n            marketCap={coin.market_cap}\n            priceChange={coin.price_change_percentage_24h}\n            volume={coin.total_volume}\n          />\n        )\n      })) : (\n      <p className=\"tool-tip\">No cryptocurrencies found!</p>\n      )}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}